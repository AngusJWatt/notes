TYPES

The most basic components of a GraphQL schema are object types, which just represent a kind of object you can fetch from your service, and what fields
it has.
	type Employee {
		name: String!
		access: [Department!]!
	}
In this example, Employee is an object type, meaning that it is a type which contains some fields. The fields are name and access, which means that
they are the only fields which appear in a query of the Employee type. String is one of the built-in scalar types. Any type is nullable by default, 
but the exclamation mark indicates that a type is non-nullable. Hence, the return type for name must be a string (although that string may be empty).
The square brackets indicate an array. Hence, the field access must return an array (although the array may be empty), and the elements of the array
must of the Department type.

ARGUMENTS

Every field can have zero or more arguments, which will affect the value that is retrieved.
	type Building {
		floorNumber: Int!
		height(unit: LengthUnit = METER): Float!
	}
In GraphQL, arguments are nonsequential and referenced by name. In this example, height has one defined argument which is unit.
Arguments can be either required or optional. If the argument is optional, a default option is supplied, so that if no argument is passed to the query
the default option is used.

QUERIES AND MUTATIONS

Every GraphQL service must contain a "query" type, and is likely to contain a "mutation" type.


RESOLVER FUNCTIONS

Resolver functions are functions that are written on a GraphQL server which determine the value returned by every field of an operation.

s
TYPES

In GraphQL, the primitive values are of the basic types: String, Int, Float, Boolean, and ID.
By default, every type is nullable. However, to ensure that a type is not nullable, it must be followed by an exclamation mark, such as "String!" to
indicate a non-nullable string (which is not the same as an empty string). To identify a list of a type, the type is surrounded by square brackets, such
as "[Int]" to indicate a list of integers [[CAN THIS INCLUDE EMPTY LISTS?]].

OBJECT TYPES

There are two families of GraphQL object types: scalar and complex. Scalar objects are those objects which cannot have subselections in a query. The
basic types are all instances of scalar object types. Complex objects are those objects which have subselections in a query.

QUERIES

In GraphQL, queries are declared via the keyword "query". If more than one query is defined, the queries must be given names. This is not necessary
with only one query, but naming all queries is best practice for debugging.
	query TestQuery {
		...
	}

FIELDS

The 

VARIABLES

DIRECTIVES

ALIASES

FRAGMENTS AND INLINE FRAGMENTS

MUTATIONS