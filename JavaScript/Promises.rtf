{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\vieww12000\viewh15840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 Description\
\ulnone \
	The 
\f1\i Promise
\f0\i0  object returns a value which represents the eventual completion or failure of an asynchronous operation. The 
\f1\i Promise
\f0\i0  object takes an asynchronous function as its argument called the \'93executor\'94. The executor is in turn fed with two functions called the \'93resolve\'94 and \'93reject\'94 functions. The executor performs some asynchronous work, then invokes one of these two functions depending respectively on whether or not the work executes as expected.\ul \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ulnone 	
\f1\i const executorFactory = (bool) => \{\
		const executor = (resolve, reject) => \{\
			setTimeout(() => \{\
				if (bool) \{\
					resolve(\'91Resolved\'92);\
				\} else \{\
					reject(\'91Rejected\'92);\
				\}\
			\}, 1000);\
		\};\
		return executor;\
	\};\

\f0\i0 \
	When defined this way, the executor will either invoke the 
\f1\i resolve
\f0\i0  function with the string \'93Resolved\'94 or will invoke the 
\f1\i reject
\f0\i0  function with the string \'93Rejected\'94, depending on the value of 
\f1\i bool
\f0\i0 . For example:\
\

\f1\i 	const resolveExecutor = executorFactory(true);\
\
	resolveExecutor(console.log, console.log);\
	// After 1 second, the console will log \'91Resolved\'92.\
\
	const rejectExecutor = executorFactory(false);\
\
	rejectExecutor(console.log, console.log);\
	// After 1 second, the console will log \'91Rejected\'92.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i0 \cf0 \
	Until the executor\'92s work is executed, the promise object is held in a \'93pending\'94 state. Once the work is executed, the promise is either fulfilled with a value (for 
\f1\i resolveExecutor
\f0\i0  it will be the string \'91Resolved\'92) or is rejected with a reason (for 
\f1\i rejectExecutor
\f0\i0  it will be the string \'91Rejected\'92). If the promise is fulfilled, the promise can then perform some action, which will execute asynchronously as it will wait for the fulfilment of the promise to execute. This callback function will take an argument of the promise\'92s fulfilment value, and is executed via the 
\f1\i Promise
\f0\i0  method 
\f1\i then
\f0\i0 .\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\i \cf0 	const resolvePromise = new Promise(resolveExecutor);
\f0\i0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\i \cf2 \
	resolvePromise.then(console.log);\

\f0\i0 \
	However, this will only execute in such instances where the promise is fulfilled. If the rejection is not handled, the 
\f1\i Promise
\f0\i0  object will throw an error if the promise rejects. To handle this, the error can be caught in a 
\f1\i catch
\f0\i0  block at the end of the 
\f1\i then
\f0\i0  statements. However, it is also possible to contain the error as the second argument of the 
\f1\i then
\f0\i0  method for any individual 
\f1\i then
\f0\i0 .\
\
	
\f1\i const rejectPromise = new Promise(rejectExecutor);\

\f0\i0 \
	rejectPromise.then(console.log).catch(console.log);\
\
	
\f1\i rejectPromise.then(console.log, console.log);\

\f0\i0 \
	In such cases where the \
\
\ul Chaining Promises\
\ulnone \
	When a Promise\'92s 
\f1\i then
\f0\i0  method is called, what is returned is itself a Promise object.\
\

\f1\i 	console.log(myPromise instanceof Promise);\
	// true\
\
	console.log(myPromise.then(() => \{\}) instanceof Promise);\

\f0\i0 \
	Consequently, }