{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red127\green127\blue127;\red0\green0\blue0;\red127\green127\blue127;
\red251\green2\blue7;}
{\*\expandedcolortbl;;\cssrgb\c57046\c57047\c57046;\cssrgb\c0\c0\c0;\cssrgb\c57046\c57047\c57046;
\cssrgb\c100000\c14913\c0;}
\paperw11900\paperh16840\vieww12000\viewh15840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 Description\ulnone \
\
	An object in JavaScript is a collection of properties, which is an association between a key name and a value. In such cases where the properties are functions, they are referred to as methods. The properties are assigned to the object in name/value pairs of the form \'93name: value\'94. Each name/value pair is separated by a comma.\
\
	
\f1\i const myObject = \{\
		value = \'93Foo\'94,\
		myFunction = function() \{\
			return \'93Bar\'94;\
		\}\
	\};
\f0\i0 \
\
	The most common way to access an objects is using dot notation.\

\f1\i \
	console.log(myObject.value);\
	\cf2 /*\'94Foo\'94*/\
	\cf3 console.log(myObject.function);\
	\cf2 /*function() \{\
		return \'93Bar\'94;\
	\}*/\

\f0\i0 \cf3 \
	The property can also be accessed by treating the object as an array, and referencing the property by its key value (its name).\

\f1\i \cf0 \
	console.log(myObject[\'93value\'94]);\
	\cf4 /*\'94Foo\'94*/
\f0\i0 \cf0 \
\
\ul Property Value Shorthand\
\ulnone \
	In ES6, it is possible to use property value shorthand to reduce the amount of code necessary to define the attributes of an object. \
\

\f1\i 	const val = "Foo";\
	const myObject = \{val\};\
	console.log(myObject.val);\
	\cf4 /*\'94Foo\'94*/\

\f0\i0 \cf3 \
	This also works for including object methods.\
\

\f1\i 	function val() \{\
		return "Foo";\
	\}\
	const myObject = \{val\};\
	console.log(myObject.val());\
	\cf4 /*\'94Foo\'94*/
\f0\i0 \cf3 \
\
	This only works in cases where the variable is accessible.\
\

\f1\i 	const myObject = \{val\};\
	console.log(myObject.val);\
   	const val = "Foo";\
	\cf5 /*Uncaught ReferenceError: Cannot access 'val' before initialization*/\

\f0\i0 \cf3 \
	\
\
	}