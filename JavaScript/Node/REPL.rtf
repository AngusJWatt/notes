{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red127\green127\blue127;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c57046\c57047\c57046;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\vieww12000\viewh15840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 REPL\ulnone \
\
	REPL stands for \'93Read, Evaluate, Print, Loop\'94. It means that the program will read a given input, evaluate its contents, print something based upon what it has evaluated, then loop back to waiting for more input.\
	Node has REPL functionality on the command line. A REPL session can be opened by typing in the command 
\f1\i node
\f0\i0  by itself.\
\
	
\f1\i node\
	>\

\f0\i0 \
	This gives the developer the opportunity to evaluate code without needing to explicitly execute a script.\
	When presented with an expression, Node will print that expression.\
\
	
\f1\i node\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	> \'91Foo\'92\
	\'91\cf2 Foo\'92\cf0 \

\f0\i0 \
	In such cases where Node is presented with a statement, it will return only 
\f1\i undefined
\f0\i0 .\
\
	
\f1\i node\
	> const myVar = \'91Foo\'92\
	\cf2 undefined
\f0\i0 \cf0 \
\
\ul Multiline Statements\ulnone \
\
	Node\'92s REPL is able to infer when a statement requires multiple lines.\
\
	
\f1\i node\
	> const myFunction = function(x) \{\
	\'85 if (x == true) \{\
	\'85.. return \'93Foo\'94;\
	\'85.. \}\
	\'85 \};\
	\cf2 undefined\cf3 \

\f0\i0 \
\ul REPL Commands\
\ulnone \
	To see all of the REPL commands, the command 
\f1\i .help
\f0\i0  is used to generate a list of them.\
	The command to exit a RELP session is 
\f1\i .exit
\f0\i0 .\
	The command 
\f1\i .editor
\f0\i0  will open an editor where multiple statements can be defined at once. The editor\'92s contents are evaluated with the command 
\f1\i CTRL-c
\f0\i0 , or exited with 
\f1\i CTRL-d
\f0\i0 .\
	A multiline definition can be exited out of without saving with the command 
\f1\i .break
\f0\i0 .\
	A REPL session can be saved to a file with the command 
\f1\i .save [filename]
\f0\i0 . If the type of the file is not prefixed to the file\'92s name, it will save as an ASCII file.\
	A JavaScript file can be loaded into the REPL session with the command 
\f1\i .load [filename]
\f0\i0 .\
\
\ul Single Tab and Double Tab\
\ulnone \
	Whilst in a Node REPL session, the developer may check how a word may be completed by use of the double tab.\
\
	
\f1\i node\
	> N[TAB TAB]\
	\cf2 NaN		Number\

\f0\i0 \cf3 \
	If there is only one option available, the word will be filled in automatically when the first tab is pressed. If no options are available, then none will be displayed.\
\
\ul Underscore\
\ulnone \
	In a REPL session, the last evaluated expression will be stored as an underscore.\
\
	
\f1\i node\
	> \'91Foo\'92;\
	\cf2 \'91Foo\'92\cf3 \
	> const myVar = _;\
	\cf2 undefined\
	\cf3 > myVar;\
	\cf2 \'91Foo\'92}