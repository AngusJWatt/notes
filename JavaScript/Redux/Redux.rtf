{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\vieww10640\viewh15840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc2 Reducers\
\ulnone \
	Redux stores all of an application\'92s state in a central repository called the \'93store\'94, which represents the state as a JavaScript object. This allows components within the app to access and update the state, which is synchronised across the app.\
	The Redux store state cannot be directly modified or mutated, as it is treated as an immutable JS object. To update the state to reflect changes in the app, the user must make a \'93reducer\'94 function which takes the state as an argument and returns an updated state. It is also good practice to provide a default state in the argument, in case one is not passed in during initialisation.\
	In order to figure out the correct way to update the state, the reducer must also take an \'93action\'94 as its second argument. An action is an object which represents information to be sent to the store. The must have a \'93type\'94 string field which uniquely identifies the way to update the state which, by convention, is written in constant notation.\
	For vanilla Redux, reducers are pure functions, which means that every one of its parameters is either included in the arguments or is a constant, and no mutation may occur to any argument. This implies that the same value is always returned from a pure function when the arguments are the same.\
\
	
\f1\i //Example reducer for a counter\
	const counterReducer = (state = \{ count: 0 \}, action) => \{\
		if (action.type === \'91ADD_1\'92) \{\
			return \{ \'85state, count: state.count+1 \};\
		\}  else if (action.type === \'91REMOVE_1\'92) \{\
			if (state.count > 0) \{\
				return \{ \'85state, count: state.count-1 \};\
			\}\
			return \{ \'85state, count: 0 \};\
		\}\
		return state;\
	\};\

\f0\i0 \
\ul Creating A Store\
\ulnone \
	In order to create a Redux store that can be shared across an app, the function 
\f1\i createStore
\f0\i0  must be imported from 
\f1\i redux
\f0\i0 . This function takes three arguments: the first argument is the reducer, which informs the store how to update; the second argument is the default state of the store (if none is provided, then the state is initialised with the value 
\f1\i undefined
\f0\i0 ); the third argument is for middleware which modifies the behaviour of the store, allowing for features such as asynchronous Redux.\
\
	
\f1\i //Example store for the counter\
	import \{ createStore \} from \'91redux\'92;\
	const counterStore = createStore(counterReducer, \{ count: 0 \});\

\f0\i0 \
	This new store is an object with five attributes: 
\f1\i dispatch
\f0\i0 , 
\f1\i subscribe
\f0\i0 , 
\f1\i getState
\f0\i0 , 
\f1\i replaceReducer
\f0\i0 , and 
\f1\i Symbol
\f0\i0 . The 
\f1\i dispatch
\f0\i0  method is used to update the state of the store when provided actions; the 
\f1\i subscribe
\f0\i0  method gets invoked whenever 
\f1\i dispatch
\f0\i0  is called; the 
\f1\i getState
\f0\i0  method returns the state of the store; the 
\f1\i replaceReducer
\f0\i0  replaces the root reducer of the store with an updated reducer; and the 
\f1\i Symbol
\f0\i0  method returns a JS symbol for the store.\
\
\ul Dispatching Actions\
\ulnone \
	As part of the fundamental architecture of Redux, there is no \'91setState\'92 method to the store. Instead, the store is updated when its 
\f1\i dispatch
\f0\i0  method gets called with an action as its argument.\
\
	
\f1\i console.log(counterStore.getState());\
	// \{ count: 0 \}\
	counterStore.dispatch(\{ type: \'91ADD_1\'92 \});\
	console.log(counterStore.getState());\
	// \{ count: 1 \}\
	}