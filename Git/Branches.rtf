{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red127\green127\blue127;\red33\green255\blue6;\red0\green0\blue0;
\red127\green127\blue127;\red0\green0\blue0;\red33\green255\blue6;}
{\*\expandedcolortbl;;\cssrgb\c57046\c57047\c57046;\cssrgb\c0\c97680\c0;\cssrgb\c0\c0\c0;
\cssrgb\c57046\c57047\c57046;\csgray\c0\c0;\cssrgb\c0\c97680\c0;}
\paperw11900\paperh16840\vieww13080\viewh10600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 Branches\
\ulnone \
	Branches in Git are just references that point to commits. After the first commit, the default branch is called the \'93master\'94 branch. However, this name is just a convention, and holds no status over any other branch in theory. The branch will point towards the latest commit.\
\
	myCookbook$ 
\f1\i git branch\
	\cf2 * master\cf3 \

\f0\i0 \cf4 \
	The location of the branch is found in the file \'93.git/refs/heads\'94 file.\
\
	
\f1\i myCookbook$ cat .git/refs/head/master\
	\cf5 \cb6 \CocoaLigature0 beefc005b014d0dc35578fad5c6e486d305629f8\
\cf4 	myCookbook$ git log\
	\cf2 commit \cf5 beefc005b014d0dc35578fad5c6e486d305629f8 (HEAD -> master)\
	[\'85]\

\f0\i0 \cf4 \
	In order to create a new branch, the command 
\f1\i git branch [filename]
\f0\i0  is used. This creates a new branch in the \'93heads\'94 folder, which points to the user\'92s current commit.\
\
	
\f1\i myCookbook$ git branch otherBranch\cf5 \
	
\f0\i0 \cf0 \cb1 \CocoaLigature1 myCookbook$ 
\f1\i git branch\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	\cf5 * \cf2 master\cf7 \
	\cf2 otherBranch\

\f0\i0 \cf4 \
	 Git identifies which branch the current user is one through the \'93.git/HEAD\'94 file, and where any changes will be made. The \'93head\'94 points to a particular branch or commit.\
\
	
\f1\i myCookbook$ cat .git/HEAD\
	\cf2 ref: refs/heads/master
\f0\i0 \
\cf4 \
	To switch between the branches in the heads file, the command 
\f1\i git checkout [filename]
\f0\i0  is used.\
\
	
\f1\i myCookbook$ git checkout otherBranch\
	\cf2 Switched to branch \'91otherbranch\'92\cf4 \
	myCookbook$ git branch\
	\cf2 master\
	* otherBranch\
\cf4 	myCookbook$ cat .git/HEAD\
	\cf2 ref: refs/heads/otherBranch\

\f0\i0 \cf4 \
	If a change is made on one branch, those changes will not be reflected on any other branches.\
\
	myCookbook$ cat file menu\
	\cf2 Apple Pie\
	Spaghetti\
\cf4 	myCookbook$ git add menu\
	myCookboo
\f1\i \cb6 k$ git commit -m \'93Commit on otherBranch\'94\
	\cf2 \CocoaLigature0 [otherBranch bb79035] Commit on otherBranch\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2  	1 file changed, 1 insertion(+)\
	
\f0\i0 \cf4 \cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ g\CocoaLigature0 it log\
	\cf2 commit bb790354b4cfaa1585645d08d99c8699e1b4fe23 (HEAD -> otherBranch)\
	[\'85]\
	Commit on otherBranch\
	commit \cf5 \cb6 beefc005b014d0dc35578fad5c6e486d305629f8 (master)\
	[\'85]\
\cf2 \cb6 	My first commit\
	
\f0\i0 \cf4 \cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git checkout master\
	\cf2 Switched to branch \'91master\'92\
	
\f0\i0 \cf4 \cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git log\
	\cf5 \cb6 commit beefc005b014d0dc35578fad5c6e486d305629f8 (master)\
	[\'85]\
	My first commit\

\f0\i0 \cf4 \
\ul Successive Commits\
\ulnone \
	In order to track the history of a project, each commit after the initial commit contains information on the parent commit.\
\
\cb1 \CocoaLigature1 	myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git checkout otherBranch\
	\cf5 \cb6 Switched to branch \'91otherBranch\'92
\f0\i0 \cf4 \
	\cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git cat-file -p bb79\cf2 \
	tree fe967950e8ec9012bae05fb56dde7bc964d05b7e\
	parent \cf5 \cb6 beefc005b014d0dc35578fad5c6e486d305629f8\
	[\'85]\
\cf4 \cb6 \

\f0\i0 \cb6 	With this, the history of commits can be traced back from the head to the first commit of the project.\
\
\ul Merging\
\ulnone \
	Merging is when a commit takes two commits as its parents. It is achieved through the command 
\f1\i \cb6 git merge [branch/commit]
\f0\i0 \cb6 . If there are incompatible differences between the files, a merge conflict will need to be resolved before any content is committed.\
\
	\cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git checkout master\
	\cf2 Switched to branch \'91master\'92\cf4 \
	
\f0\i0 \cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ cat menu\
	\cf2 Apple Pie\
	Lentil Soup\
	
\f0\i0 \cf4 \cb1 myCookboo
\f1\i \cb6 k$ git add menu\
	
\f0\i0 \cb1 myCookboo
\f1\i \cb6 k$ git commit -m \'93Commit on master\'94\
	\cf2 \CocoaLigature0 [master 805ce72] Commit on master\
	1 file changed, 1 insertion(+)\
\cf4 	
\f0\i0 \cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ \CocoaLigature0 git merge otherBranch\cf2 \
	Auto-merging menu\
	CONFLICT (content): Merge conflict in menu\
	Automatic merge failed; fix conflicts and then commit the result.\

\f0\i0 \cf4 \cb6 	\cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ 
\f0\i0 \cb6 \CocoaLigature0 cat menu\
	\cf2 Apple Pie\
	<<<<<<< HEAD\
	Lentil Soup\
	=======\
	Spaghetti\
	>>>>>>> otherBranch\cf4 \
\
	In order to fix the merge conflict, the user must make a decision as to what content to keep and what to discard. After that, the files may be committed.\
\
	\cb1 \CocoaLigature1 myCookboo
\f1\i \cb6 k$ open menu\
	\cf2 Apple Pie\
	Lentil Soup\
	Spaghetti\
	
\f0\i0 \cf4 \cb1 myCookboo
\f1\i \cb6 k$ git add menu\
	
\f0\i0 \cb1 myCookboo
\f1\i \cb6 k$  git commit -m \'93Merged\'94\
	\cf2 \CocoaLigature0 [master 06eced7] Merged\cf4 \
	myCookbook$ git cat-file -p 06ec\cf2 \
	tree a7901c6a59edba0e7bfff067a403decd161dbbb7\
	parent 805ce72c30a13a8b3bbf0198ed62d4057489e3aa\
	parent bb790354b4cfaa1585645d08d99c8699e1b4fe23\
	[\'85]\

\f0\i0 \cf4 \cb6 \
	If a merge is made between a commit and another commit which has the former commit as a merge-parent, Git will simply save memory and point the head towards the second commit. This is because the child commit already has the content of its parent merged into itself, so a second merge would be considered wasteful. This technique is called a \'93fast-forward\'94. In order to make a new, bespoke merge, the desired commit will have to be made between both parents again.\
\
\ul Detached Head\
\ulnone \
	The head need not necessarily point to a branch: it could be made to instead point at a commit.\
\
	
\f1\i \cb6 myCookbook$ cat .git/refs/heads/master\cf2 \
	06eced78f887a19604b85bb479263076df61afd2\
	\cf4 myCookbook$ git checkout 06eced78f887a19604b85bb479263076df61afd2\
	\cf2 Note: checking out '06eced78f887a19604b85bb479263076df61afd2'.\
	You are in 'detached HEAD' state. You can look around, make experimental\
	changes and commit them, and you can discard any commits you make in this\
	state without impacting any branches by performing another checkout.\
	If you want to create a new branch to retain commits you create, you may\
	do so (now or later) by using -b with the checkout command again. Example:\
		git checkout -b <new-branch-name>\
	HEAD is now at 06eced7 Merge\

\f0\i0 \cf4 \cb6 \
	This gives the user the ability to make changes and commit them without affecting any branches. However, if the changes are not eventually given their own branch, they will be discarded when the garbage collector next runs.}